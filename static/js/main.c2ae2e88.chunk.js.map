{"version":3,"sources":["Page.jsx","App.js","reportWebVitals.js","index.js"],"names":["plane","camera","graphOffset","frontFaces","rightFaces","leftFaces","backFaces","noCull","minimumPoint","maximumPoint","window","mobileCheck","a","check","navigator","userAgent","vendor","opera","test","substr","remap","value","low1","high1","low2","high2","minMax","createFakeData","resolution","x0","y0","x1","y1","FAKE_DATA","i","j","Math","sin","pointsX","sqrt","pow","PI","data","addText","text","size","position","MeshBuilder","CreatePlane","width","height","billboardMode","textureGround","DynamicTexture","drawText","concat","round","getContext","textAlign","materialGround","StandardMaterial","diffuseTexture","hasAlpha","backFaceCulling","specularColor","Color3","Black","material","addLine","start","direction","myPoints","Vector3","x","y","z","CreateLines","points","updateGraph","graphMesh","arguments","length","undefined","positions","getVerticesData","VertexBuffer","PositionKind","localMinimum","localMaximum","thisPoint","X_ID","Y_ID","ELEVATION","updateVerticesData","min","max","val","drawGrid","centerPos","resX","resY","lines","increment","startPos","push","line","rotateAround","Axis","X","Y","Z","color","alpha","drawLegend","minimum","maximum","margin","textSize","textIncrement","rotation","Zero","onSceneReady","scene","CreateTiledGround","xmin","xmax","subdivisions","w","h","updatable","ArcRotateCamera","wheelPrecision","lowerRadiusLimit","upperRadiusLimit","fov","lockedTarget","canvas","getEngine","getRenderingCanvas","attachControl","HemisphericLight","useVertexColors","stdMaterial","applyMaterials","colors","Array","fill","HEIGHT","colorR","abs","colorG","colorB","setVerticesData","ColorKind","updateColor","forEach","elem","dispose","scale","updateLegend","onRender","isFacingForward","Dot","getForwardRay","Forward","isFacingRight","Left","isFacingLeft","Right","isFacingBack","Backward","isVisible","Page","React","createElement","SceneComponent","antialias","id","App","className","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.c2ae2e88.chunk.js","sourcesContent":["import React from \"react\";\nimport { Vector3, HemisphericLight, MeshBuilder, StandardMaterial, ArcRotateCamera, VertexBuffer, AxesViewer, Color3, DynamicTexture, Color4, Vector2, Axis } from \"@babylonjs/core\";\nimport SceneComponent from 'babylonjs-hook';\nimport \"./App.css\";\n\nlet graphOffset = 0;\nlet plane;\nlet frontFaces = [];\nlet rightFaces = [];\nlet leftFaces = [];\nlet backFaces = [];\nlet noCull = [];\n\nlet minimumPoint = 999999;\nlet maximumPoint = -999999;\nlet camera;\nlet pointsX = 128;\nlet scale = 0.5;\n\nwindow.mobileCheck = function() {\n  let check = false;\n  (function(a){if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);\n  return check;\n};\n\nconst distance2D = (x0,y0,x1,y1) => {\n  return Math.sqrt(Math.pow(x1-x0,2)+Math.pow(y1-y0,2))\n}\n\nconst remap = (value,low1,high1,low2,high2) => {\n  return(minMax(low2,high2,low2 + (value - low1) * (high2 - low2) / (high1 - low1),))\n}\n\nconst createFakeData = (resolution) => {\n\n  const FAKE_DATA = []\n\n  for(let i = 0 ; i < resolution; i++){\n    FAKE_DATA[i] = [];\n    for(let j = 0 ; j < resolution; j++){\n      FAKE_DATA[i][j] = Math.sin(distance2D(i,j,pointsX/2,pointsX/2)/pointsX*6 + (Math.PI * 0.5) + graphOffset ) * 20\n    }\n  }\n  return FAKE_DATA;\n}\n\nlet data = createFakeData(pointsX)\n\nconst addText = (text,size,resolution,position) => {\n\n  //Setup and Position\n  let plane = MeshBuilder.CreatePlane(\"text\", {width: size*5, height : size});\n  plane.position = position\n  plane.billboardMode = 2;\n\n  //Create dynamic texture\n\tvar textureGround = new DynamicTexture(\"dynamic texture\", {width:resolution*5, height:resolution});   \n\n  //Add text to dynamic texture\n  textureGround.drawText(text, null, null, `${Math.round(resolution)}px regular`, \"white\",\"transparent\", true, true);\n  textureGround.getContext().textAlign = \"center\"\n\n  //Create a flat material\n\tvar materialGround = new StandardMaterial(\"Mat\");    \t\t\t\t\n\tmaterialGround.diffuseTexture = textureGround;\n  materialGround.diffuseTexture.hasAlpha = true;\n  materialGround.backFaceCulling = false;\n  materialGround.specularColor = Color3.Black()\n\n\tplane.material = materialGround;\n\n  return plane\n}\n\nconst addLine = (start,direction) => {\n  const myPoints = [\n    start,\n    new Vector3(start.x+direction.x,start.y+direction.y,start.z+direction.z)\n  ]\n\n  return MeshBuilder.CreateLines(\"lines\", {points: myPoints});\n}\n\nconst updateGraph = (graphMesh,data = false) => {\n  let positions = graphMesh.getVerticesData(VertexBuffer.PositionKind);\n  let localMinimum = 999999, localMaximum = -999999;\n  // Get the local Minimum and Maximum\n  for(let i = 0 ; i < data.length; i++){\n    for(let j = 0 ; j < data.length; j++){\n      let thisPoint = data[i][j];\n\n      if(thisPoint < localMinimum){\n        localMinimum = thisPoint;\n      }\n\n      else if (thisPoint > localMaximum){\n        localMaximum = thisPoint;\n      }\n\n    }\n  }\n\n  minimumPoint = localMinimum;\n  maximumPoint = localMaximum;\n\n  //move the graph points and scale it\n  for(let i = 0 ; i < positions.length; i+=3){\n    let x = positions[i];\n    let y = positions[i+1];\n    let z = positions[i+2];\n\n    const X_ID = Math.round(remap(x,-1,1,0,pointsX-1))\n    const Y_ID = Math.round(remap(z,-1,1,0,pointsX-1))\n\n    const ELEVATION = data ? data[X_ID][Y_ID] : Math.sin((x+y)*10)/10\n    positions[i+1] = remap(ELEVATION,minimumPoint,maximumPoint,-scale,scale)\n    //positions[i+1] = Math.random()\n    //positions[i] = Math.random()\n  }\n\n\n  graphMesh.updateVerticesData(VertexBuffer.PositionKind, positions);\n}\n\nconst minMax = (min,max,val) => {\n  return (Math.min(max,Math.max(min,val)))\n}\n\nconst updateColor = (graphMesh) => {\n  let colors  = new Array( pointsX * pointsX *pointsX ).fill(1) //= graphMesh.getVerticesData(VertexBuffer.ColorKind);\n  let positions = graphMesh.getVerticesData(VertexBuffer.PositionKind);\n\n  for(let i = 0 ; i < colors.length; i+=4){\n\n    const HEIGHT = positions[(i*3/4)+1]\n\n\n    let colorR = HEIGHT < 0 ? Math.abs(HEIGHT/scale) : 0\n\n    let colorG = HEIGHT > 0 ? Math.abs(HEIGHT/scale) : 0\n\n    let colorB = 1-Math.abs(HEIGHT/scale)\n\n    colors[i] =  colorR\n    colors[i+1] = colorG //colorG\n    colors[i+2] = colorB //colorB\n  }\n  \n\n  graphMesh.setVerticesData(VertexBuffer.ColorKind, colors);\n}\n\nconst applyMaterials = (graphMesh) => {\n  let stdMaterial = new StandardMaterial(\"stdMaterial\");\n  graphMesh.material = stdMaterial\n  stdMaterial.specularColor = Color3.Black()\n  stdMaterial.backFaceCulling = false\n  //stdMaterial.wireframe = true;\n}\n\nconst drawGrid = (centerPos,direction,width,height,resX,resY) => {\n  let lines = []\n\n  for(let i = 0 ; i < resY; i++){\n    let increment = height / (resY-1);\n\n    let startPos = new Vector3(centerPos.x - (width*0.5),centerPos.y-(height*0.5) + (increment * i),centerPos.z);\n\n    lines.push(addLine(startPos,new Vector3(width,0,0)))\n  }\n\n  for(let i = 0 ; i < resX; i++){\n\n    let increment = width / (resX-1);\n\n    const startPos = new Vector3(centerPos.x - (width*0.5) + (increment * i),centerPos.y-(height*0.5),centerPos.z)\n    lines.push(addLine(startPos, new Vector3(0,height,0)))\n  }\n\n  for(let i = 0 ; i < lines.length; i++){\n    let line = lines[i];\n    line.rotateAround(centerPos,Axis.X,direction.x/180*Math.PI);\n    line.rotateAround(centerPos,Axis.Y,direction.y/180*Math.PI);\n    line.rotateAround(centerPos,Axis.Z,direction.z/180*Math.PI);\n    line.color = Color3.Black();\n    line.alpha = 0.5\n  }\n\n  return lines;\n}\n\nconst drawLegend = (centerPos,direction,width,minimum,maximum,resX,margin,textSize) => {\n  let lines = []\n\n  for(let i = 0 ; i < resX; i++){\n\n    let increment = width / (resX-1);\n    let textIncrement = Math.round(remap(i,0,resX-1,minimum,maximum)*10)/10;\n\n    const startPos = new Vector3(centerPos.x - (width*0.5) + (increment * i),centerPos.y,centerPos.z)\n\n    if(i === 0){\n      lines.push(addText(textIncrement,textSize,128, new Vector3(startPos.x+(margin),startPos.y,startPos.z))) // BOTTOM TEXT\n    }\n    else if(i < resX-1){\n      lines.push(addText(textIncrement,textSize,128, startPos)) // BOTTOM TEXT\n    }\n    else if(i === resX-1){\n      lines.push(addText(textIncrement,textSize,128, new Vector3(startPos.x-(margin),startPos.y,startPos.z))) // BOTTOM TEXT\n    }\n\n  }\n\n  for(let i = 0 ; i < lines.length; i++){\n    let line = lines[i];\n    line.rotateAround(centerPos,Axis.X,direction.x/180*Math.PI);\n    line.rotateAround(centerPos,Axis.Y,direction.y/180*Math.PI);\n    line.rotateAround(centerPos,Axis.Z,direction.z/180*Math.PI);\n    line.rotation = Vector3.Zero()\n  }\n\n  return lines;\n}\n\nconst updateLegend = () => {\n  let textSize = 0.03\n  if(window.mobileCheck()){\n    textSize = 0.1\n  }\n\n  frontFaces.forEach((elem) => {elem.dispose()})\n  rightFaces.forEach((elem) => {elem.dispose()})\n  leftFaces.forEach((elem) => {elem.dispose()})\n  backFaces.forEach((elem) => {elem.dispose()})\n  noCull.forEach((elem) => {elem.dispose()})\n\n  frontFaces = [];\n  backFaces = [];\n  rightFaces = [];\n  leftFaces = [];\n  noCull = [];\n  // create the lines\n\n  frontFaces = drawGrid(new Vector3(0,0,-1),new Vector3(0,0,0),2,scale*2,5,5);\n  backFaces = drawGrid(new Vector3(0,0,1),new Vector3(0,0,0),2,scale*2,5,5);\n  leftFaces = drawGrid(new Vector3(-1,0,0),new Vector3(0,90,0),2,scale*2,5,5);\n  rightFaces = drawGrid(new Vector3(1,0,0),new Vector3(0,90,0),2,scale*2,5,5)\n  drawGrid(new Vector3(0,-scale,0),new Vector3(90,0,0),2,2,5,5) // floor grid\n\n  \n\n  //add the horizontal text\n\n  frontFaces = frontFaces.concat(drawLegend(new Vector3(0,scale+0.025,-1) , new Vector3(0,0,0) , 2 , 0 , pointsX , 5 , textSize*1.5,textSize))\n  backFaces = backFaces.concat(drawLegend(new Vector3(0,scale+0.025,1) , new Vector3(0,0,0) , 2 , 0 , pointsX , 5 , textSize*1.5,textSize))\n  leftFaces = leftFaces.concat(drawLegend(new Vector3(-1,scale+0.025,0) , new Vector3(0,-90,0) , 2 , 0 , pointsX , 5 , textSize*1.5,textSize))\n  rightFaces = rightFaces.concat(drawLegend(new Vector3(1,scale+0.025,0) , new Vector3(0,-90,0) , 2 , 0 , pointsX , 5 , textSize*1.5,textSize))\n\n  //add the bottom text (doesn't cull)\n\n  noCull = noCull.concat(drawLegend(new Vector3(0,-scale-0.025,-1),new Vector3(0,0,0),2 , 0 , pointsX , 5,textSize*1.5,textSize));\n  noCull = noCull.concat(drawLegend(new Vector3(0,-scale-0.025,1),new Vector3(0,0,0),2 , 0 , pointsX , 5,textSize*1.5,textSize));\n  noCull = noCull.concat(drawLegend(new Vector3(-1,-scale-0.025,0),new Vector3(0,-90,0),2 , 0 , pointsX , 5,textSize*1.5,textSize));\n  noCull = noCull.concat(drawLegend(new Vector3(1,-scale-0.025,0),new Vector3(0,-90,0),2 , 0 , pointsX , 5,textSize*1.5,textSize));\n  \n  // add the vertical text (duplicates for propper culling)\n  frontFaces = frontFaces.concat(drawLegend(new Vector3(-1,0,-1),new Vector3(0,0,90),scale*2 , minimumPoint, maximumPoint , 5,textSize*0.5,textSize))\n  leftFaces = leftFaces.concat(drawLegend(new Vector3(-1,0,-1),new Vector3(0,0,90),scale*2 , minimumPoint, maximumPoint , 5,textSize*0.5,textSize))\n\n  frontFaces = frontFaces.concat(drawLegend(new Vector3(1,0,-1),new Vector3(0,0,90),scale*2 , minimumPoint, maximumPoint , 5,textSize*0.5,textSize))\n  rightFaces = rightFaces.concat(drawLegend(new Vector3(1,0,-1),new Vector3(0,0,90),scale*2 , minimumPoint, maximumPoint , 5,textSize*0.5,textSize))\n\n  leftFaces = leftFaces.concat(drawLegend(new Vector3(-1,0,1),new Vector3(0,0,90),scale*2 , minimumPoint, maximumPoint , 5,textSize*0.5,textSize))\n  backFaces = backFaces.concat(drawLegend(new Vector3(-1,0,1),new Vector3(0,0,90),scale*2 , minimumPoint, maximumPoint , 5,textSize*0.5,textSize))\n\n  rightFaces = rightFaces.concat(drawLegend(new Vector3(1,0,1),new Vector3(0,0,90),scale*2 , minimumPoint, maximumPoint , 5,textSize*0.5,textSize))\n  backFaces = backFaces.concat(drawLegend(new Vector3(1,0,1),new Vector3(0,0,90),scale*2 , minimumPoint, maximumPoint , 5,textSize*0.5,textSize))\n}\n\nconst onSceneReady = (scene) => {\n  // This creates and positions a free camera (non-mesh)\n  plane = MeshBuilder.CreateTiledGround(\"tiled ground\",{xmin : -1 , xmax : 1 ,subdivisions : {w: pointsX-1, h: pointsX-1},updatable:true},scene)\n\n  camera = new ArcRotateCamera(\"camera\", -Math.PI / 2, Math.PI / 2.5, 3, new Vector3(0, 0, 0), scene);\n  camera.wheelPrecision = 30\n  camera.lowerRadiusLimit = 15\n  camera.upperRadiusLimit = 1000\n  camera.fov = 0.1\n\n\n  // This targets the camera to scene origin\n  camera.lockedTarget = plane;\n\n  const canvas = scene.getEngine().getRenderingCanvas();\n\n  // This attaches the camera to the canvas\n  camera.attachControl(canvas, true);\n\n  // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n  const light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene);\n\n  plane.useVertexColors = true;\n  \n  applyMaterials(plane)\n\n  updateGraph(plane,data)\n  \n  updateColor(plane)\n\n  updateLegend()\n\n};\n\n\nconst onRender = (scene) => {\n\n  let frontDot = Vector3.Dot(camera.getForwardRay().direction, Vector3.Forward())\n  let rightDot = Vector3.Dot(camera.getForwardRay().direction, Vector3.Left())\n  let leftDot = Vector3.Dot(camera.getForwardRay().direction, Vector3.Right())\n  let backDot = Vector3.Dot(camera.getForwardRay().direction, Vector3.Backward())\n  let limit = 0.1 ;\n\n  let isFacingForward = (frontDot >= limit);\n  let isFacingRight = (rightDot >= limit);\n  let isFacingLeft = (leftDot >= limit);\n  let isFacingBack = (backDot >= limit);\n\n  frontFaces.forEach((elem) => {elem.isVisible = true})\n  rightFaces.forEach((elem) => {elem.isVisible = true})\n  leftFaces.forEach((elem) => {elem.isVisible = true})\n  backFaces.forEach((elem) => {elem.isVisible = true})\n\n  if(isFacingForward){\n    frontFaces.forEach(elem => {(elem.isVisible = false)})\n  }\n  if(isFacingRight){\n    rightFaces.forEach(elem => {(elem.isVisible = false)})\n  }\n  if(isFacingLeft){\n    leftFaces.forEach(elem => {(elem.isVisible = false)})\n  }\n  if(isFacingBack){\n    backFaces.forEach(elem => {(elem.isVisible = false)})\n  }\n\n  graphOffset += 0.005;\n  \n  updateGraph(plane,createFakeData(pointsX))\n};\n\n\nexport default () => (\n  <div>\n    <SceneComponent antialias onSceneReady={onSceneReady} onRender={onRender} id=\"my-canvas\" />\n  </div>\n);","import React from 'react'\nimport Page from './Page';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Page/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}